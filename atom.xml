<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Skye Anything</title>
  
  <subtitle>让每个字都有分量</subtitle>
  <link href="https://hicsc.com/atom.xml" rel="self"/>
  
  <link href="https://hicsc.com/"/>
  <updated>2024-10-10T15:19:06.825Z</updated>
  <id>https://hicsc.com/</id>
  
  <author>
    <name>Skye</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何做技术选型?</title>
    <link href="https://hicsc.com/choosing-technology-guide/"/>
    <id>https://hicsc.com/choosing-technology-guide/</id>
    <published>2024-10-10T14:24:41.000Z</published>
    <updated>2024-10-10T15:19:06.825Z</updated>
    
    
    <summary type="html">&lt;p&gt;曾经在文章中说过一句话，大意是说判断架构的牛逼与否，不是看它有多复杂，而是看它在解决同样问题时有多简单。有同学回复说，牛逼的架构是靠时间验证，跟当时解决问题的复杂和简单没啥关系。这话当然没有问题，任何牛逼的架构都需要时间来验证，但我的本意其实是说在做架构设计时，应当尽量追求简单，坚决砍掉一些可有可无的设计。&lt;/p&gt;
&lt;p&gt;说句题外话，身边的工程师朋友比较多，所以倒闭的公司看到的也挺多。很多公司一上来就高并发、分布式、分库分表，但真的，到最后死的时候，数据也没能把一张 MySQL 表装满。可能是看得多了的缘故，不管是做架构还是写代码，就特别推崇 KISS 原则，所以才有了前面的那些话，但这仅是个人感悟，绝非通用的设计原则。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/forest/how-to-make-technology-selection.png&quot; alt=&quot;封面图&quot;&gt; Photo by &lt;a href=&quot;https://unsplash.com/@epicantus&quot;&gt;Daria Nepriakhina&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;作为架构设计的重要环节，技术选型的思路和原则应当与我们之前所学一样。那如何为业务场景选择适合的实现技术？又如何构建自己的技术选型方法论？&lt;/p&gt;</summary>
    
    
    
    <category term="知识" scheme="https://hicsc.com/knowledge/"/>
    
    
  </entry>
  
  <entry>
    <title>深入理解JVM运行时内存结构(续)</title>
    <link href="https://hicsc.com/jvm-runtime-memory-2/"/>
    <id>https://hicsc.com/jvm-runtime-memory-2/</id>
    <published>2024-07-06T05:30:10.000Z</published>
    <updated>2024-10-09T15:44:22.959Z</updated>
    
    
    <summary type="html">&lt;p&gt;JVM 以方法作为执行的基本单位，栈帧(Stack Frame)则是用于支持 JVM 进行方法调用和执行的数据结构。每个方法在执行的同时都会创建一个栈帧用于存储方法的局部变量表、操作数栈、动态连接、方法返回地址和一些额外的附加信息。每一个方法从调用开始至执行结束，都对应着一个栈帧在虚拟机栈里面从入栈到出栈的过程。当方法调用结束，栈帧即被销毁，局部变量表、操作数栈等也随之消失。&lt;/p&gt;
&lt;p&gt;Java 代码在编译时就已经计算出栈帧需要多大的局部变量表，需要多深的操作数栈，并把它们写入到方法表的 Code 属性之中。换句话说，一个栈帧需要分配多少内存，在编译时已经确定，并不会受到程序运行期间变量数据的影响，仅取决于源码和具体的虚拟机是如何实现栈帧的。&lt;/p&gt;</summary>
    
    
    
    <category term="知识" scheme="https://hicsc.com/knowledge/"/>
    
    
  </entry>
  
  <entry>
    <title>深入理解 JVM 对象模型</title>
    <link href="https://hicsc.com/jvm-object-model/"/>
    <id>https://hicsc.com/jvm-object-model/</id>
    <published>2024-07-03T15:00:12.000Z</published>
    <updated>2024-10-09T15:45:04.545Z</updated>
    
    
    <summary type="html">&lt;p&gt;在 &lt;a href=&quot;https://hicsc.com/jvm-runtime-memory/&quot;&gt;深入理解JVM运行时内存结构&lt;/a&gt; 中，我们宏观地探讨了 JVM 运行时的内存布局。本文将深入分析每个内存区域的细节。由于不同虚拟机的内存管理实现不同，具体的讨论需要聚焦于特定虚拟机和内存区域。基于实用优先的原则，我们以最常用的 HotSpot 虚拟机和 Java 堆内存为例，深入探讨在 HotSpot 虚拟机里：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对象在堆内存中是如何布局的？&lt;/li&gt;
&lt;li&gt;JVM 是如何实现 Java 对象？&lt;/li&gt;
&lt;li&gt;对象是如何创建出来的？&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;对象的内存布局&quot;&gt;&lt;a href=&quot;#对象的内存布局&quot; class=&quot;headerlink&quot; title=&quot;对象的内存布局&quot;&gt;&lt;/a&gt;对象的内存布局&lt;/h3&gt;&lt;p&gt;在虚拟机里，对象由三部分构成，分别是 &lt;strong&gt;对象头&lt;/strong&gt;、&lt;strong&gt;实例数据&lt;/strong&gt;、&lt;strong&gt;对齐填充&lt;/strong&gt;。对象头的结构复杂，下面会详细介绍。实例数据是对象真正存储的有效信息，包含所有我们在代码中定义的各种类型的字段的内容，无论是继承自父类还是在子类中定义的。最后是对齐填充，由于HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说就是任何对象的大小都必须是8字节的整数倍。对象头部分已经被精心设计成正好是8字节的倍数，如果对象实例数据部分没有对齐的话，就需要通过对齐填充来补全。&lt;/p&gt;
&lt;p&gt;接下来，我们详细说说对象头。HotSpot 虚拟机对象的对象头由三部分构成，分别是存储对象自身运行时数据的 Mark Word、指向类型元数据的指针、当对象是数组时，记录数组长度的 length。在 64 位系统中，对象头的大小是 16 个字节，可以通过指针压缩的方式，压缩到 12 个字节。当 JVM 中存在大量对象的时候，通过指针压缩减少对象内存占用是一个提升性能的手段。&lt;/p&gt;
&lt;p&gt;需要注意的是，并不是所有虚拟机在实现对象时，都会在对象头中保留类型指针，还可以通过其它方式来查找对象类型的元数据信息，这点会在最后的「对象的访问」小节中补充讨论。&lt;/p&gt;</summary>
    
    
    
    <category term="知识" scheme="https://hicsc.com/knowledge/"/>
    
    
  </entry>
  
  <entry>
    <title>深入理解 JVM 垃圾回收机制 - 何为垃圾？</title>
    <link href="https://hicsc.com/jvm-what-objects-are-garbage/"/>
    <id>https://hicsc.com/jvm-what-objects-are-garbage/</id>
    <published>2024-06-30T00:28:29.000Z</published>
    <updated>2024-10-09T15:44:39.955Z</updated>
    
    
    <summary type="html">&lt;p&gt;随着编程语言的发展，GC 的功能不断增强，性能也不断提高，作为语言背后的无名英雄，GC 离我们的工作似乎越来越远。作为 Java 程序员，对这一点也许会有更深的体会，我们不需要了解太多与 GC 相关的知识，就能很好的完成工作。那还有必要深入了解 GC 吗？学习 GC 的意义在哪儿？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/forest/jvm-what-objects-are-garbage0.png&quot; alt=&quot;何为垃圾题图&quot;&gt;&lt;/p&gt;
&lt;p&gt;不管性能提高到何种程度，GC 都需要花费一定的时间，对于实时性要求较高的场景，就必须尽量压低 GC 导致的最大暂停时间 (GC 会导致应用线程处于暂停状态)，举两个例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实时对战游戏：如果因为 GC 导致玩家频繁卡顿，任谁都会想摔手机吧。&lt;/li&gt;
&lt;li&gt;金融交易：在某些对价格非常敏感的交易(比如：外汇)场景下，如果因为 GC 导致没有按照投资者指定的价格进行交易，相信我，这些投资者非生吃了你。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但也有许多场景，GC 的最大暂停时间没那么重要，比如，离线分析、视频网站等等。因此，知道 &lt;strong&gt;这个 GC 算法有这样的特征，所以它适合这个场景&lt;/strong&gt;，对程序员来说非常有价值，这也是我们学习 GC 最重要的意义。&lt;/p&gt;
&lt;p&gt;接下来，我们将一步步走进 GC 的世界。&lt;/p&gt;</summary>
    
    
    
    <category term="知识" scheme="https://hicsc.com/knowledge/"/>
    
    
  </entry>
  
  <entry>
    <title>深入理解JVM运行时内存结构</title>
    <link href="https://hicsc.com/jvm-runtime-memory/"/>
    <id>https://hicsc.com/jvm-runtime-memory/</id>
    <published>2024-06-27T16:10:10.000Z</published>
    <updated>2024-10-09T15:44:22.964Z</updated>
    
    
    <summary type="html">&lt;p&gt;得益于 JVM 的自动内存管理机制，开发者在写代码时，很少再去关注内存分配与释放。多数情况下，应用不会出现内存泄漏和溢出问题。不过，由于开发者把内存的控制权交给了 JVM，一旦出现内存泄露和溢出问题，如果不了解 JVM 是怎样使用内存的，将很难排查和修正错误。本文从概念上介绍 JVM 运行时内存的各个区域及其作用。&lt;/p&gt;
&lt;p&gt;JVM 在执行程序时会把其所管理的内存划分成多个不同的数据区域，每个区域的创建时间、销毁时间以及用途都各不相同。比如有的内存区域是所有线程共享的，而有的内存区域是线程隔离的。线程隔离的区域就会随着线程的启动和结束而创建和销毁。JVM 所管理的内存将会包含以下几个运行时数据区域，如下图所示。&lt;br&gt;&lt;img src=&quot;/images/forest/jvm-runtime-memory1.png&quot; alt=&quot;JVM运行时内存数据区示意图&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="知识" scheme="https://hicsc.com/knowledge/"/>
    
    
  </entry>
  
  <entry>
    <title>深入理解JVM常量池与字节码</title>
    <link href="https://hicsc.com/jvm-constant-pool/"/>
    <id>https://hicsc.com/jvm-constant-pool/</id>
    <published>2024-06-24T15:34:12.000Z</published>
    <updated>2024-10-09T15:44:47.296Z</updated>
    
    
    <summary type="html">&lt;p&gt;在 JVM 中，常量池可以分成 Class 文件常量池、运行时常量池、字符串常量池三类。&lt;/p&gt;
&lt;h3 id=&quot;Class-文件常量池&quot;&gt;&lt;a href=&quot;#Class-文件常量池&quot; class=&quot;headerlink&quot; title=&quot;Class 文件常量池&quot;&gt;&lt;/a&gt;Class 文件常量池&lt;/h3&gt;&lt;p&gt;Java 源文件经编译后得到存储字节码的 Class 文件，Class 文件是一组以 8 位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在 Class 文件中。也就是说，哪个字节代表什么含义，长度多少，先后顺序如何都是被严格限定的，是不允许改变的。比如：开头的 4 个字节存放魔数，用于确定这个文件是否能够被 JVM 接受，接下来的 4 个字节用于存放版本号，再接着存放的就是常量池。常量池的长度是不固定的，所以，在常量池的入口存放着常量池容量的计数值。&lt;/p&gt;
&lt;p&gt;常量池主要用于存放两大类常量：字面量和符号引用量，字面量相当于 Java 语言层面常量的概念，比如：字符串常量、声明为 final 的常量等等。符号引用是用一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义的定位到目标即可。&lt;/p&gt;</summary>
    
    
    
    <category term="知识" scheme="https://hicsc.com/knowledge/"/>
    
    
  </entry>
  
  <entry>
    <title>深入理解 ContextClassLoader</title>
    <link href="https://hicsc.com/jvm-context-class-loader/"/>
    <id>https://hicsc.com/jvm-context-class-loader/</id>
    <published>2024-06-23T15:01:04.000Z</published>
    <updated>2024-10-09T15:44:52.976Z</updated>
    
    
    <summary type="html">&lt;p&gt;类的加载器大多都遵循双亲委托机制，它不仅可以避免一个类被重复加载，也能够避免 Java 核心类被篡改，越基础的类由越上层的类加载器加载。但程序设计往往没有绝对不变的规则，如果有核心类想要调用用户的代码，那该怎么办？&lt;/p&gt;</summary>
    
    
    
    <category term="知识" scheme="https://hicsc.com/knowledge/"/>
    
    
  </entry>
  
  <entry>
    <title>深入理解 ClassLoader</title>
    <link href="https://hicsc.com/jvm-class-loader/"/>
    <id>https://hicsc.com/jvm-class-loader/</id>
    <published>2024-06-19T07:01:04.000Z</published>
    <updated>2024-10-09T15:44:58.356Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;ClassLoader-源码初探&quot;&gt;&lt;a href=&quot;#ClassLoader-源码初探&quot; class=&quot;headerlink&quot; title=&quot;ClassLoader 源码初探&quot;&gt;&lt;/a&gt;ClassLoader 源码初探&lt;/h3&gt;&lt;p&gt;类加载器用于加载 Java 类到虚拟机中，其实现类 &lt;code&gt;java.lang.ClassLoader&lt;/code&gt; 是一个抽象类，其职责是通过指定类的完全限定名 ( &lt;code&gt;binary name&lt;/code&gt; )，找到或生成这个类对应的字节码，这些字节码中包含类的定义数据，通过字节码就可以构造出一个 &lt;code&gt;java.lang.Class&lt;/code&gt; 对象。&lt;/p&gt;
&lt;p&gt;每个 Class 对象都包含一个定义它的类加载器的引用，而数组的 Class 对象不是用类加载器创建的，而是在 Java 运行时根据需要自动创建的，如果调用数组的 Class 对象的 &lt;code&gt;getClassLoader()&lt;/code&gt; 方法返回的类加载器与其元素类型的类加载器相同，如果数组元素是基本数据类，则没有类加载，返回空。比如：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;// C为自定义类
C[] cs = new C[2];
// jdk.internal.loader.ClassLoaders$AppClassLoader@3d4eac69
System.out.println(cs.getClass().getClassLoader());

int[] is = new int[2];
// null
System.out.println(is.getClass().getClassLoader());
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="知识" scheme="https://hicsc.com/knowledge/"/>
    
    
  </entry>
  
  <entry>
    <title>深入理解JVM类加载机制</title>
    <link href="https://hicsc.com/jvm-class-loading-mechanism/"/>
    <id>https://hicsc.com/jvm-class-loading-mechanism/</id>
    <published>2024-06-19T01:12:06.000Z</published>
    <updated>2024-10-09T15:44:34.197Z</updated>
    
    
    <summary type="html">&lt;p&gt;Java 代码在编译过后，想要被运行和使用，经过的第一个步骤就是将编译后的字节码文件加载的虚拟机，那虚拟机是如何把字节码文件加载到虚拟机的呢，接下来以一系列实例对这一流程作简要分析与介绍。&lt;/p&gt;
&lt;h3 id=&quot;类编译过程&quot;&gt;&lt;a href=&quot;#类编译过程&quot; class=&quot;headerlink&quot; title=&quot;类编译过程&quot;&gt;&lt;/a&gt;类编译过程&lt;/h3&gt;&lt;p&gt;Java 源码通过 JDK 自带的 Javac 编译器编译成 class 文件，我们把 class 文件中包含的代码称为字节码。但字节码并不能直接在计算机上运行，所以 JVM 需要将字节码翻译成机器码，其大致流程如下图所示。&lt;br&gt;&lt;img src=&quot;/images/forest/jvm-class-loading-mechanism1.png&quot; alt=&quot;Java类编译过程示意图&quot;&gt;&lt;br&gt;一般会把&lt;code&gt;.java&lt;/code&gt;文件编译成&lt;code&gt;.class&lt;/code&gt;文件的过程称为前端编译，其由 JDK 自带的 javac 工具完成。前端编译是一个非常复杂的过程，包含词法分析、注解处理、语义分析等，因此，代码中的大部分语法错误，在这个阶段就能够被识别出来。&lt;/p&gt;
&lt;p&gt;编译后的字节码文件中主要包含常量池和方法表集合两个部分，可以通过 Javap 命令来查看，后面的文章也会详细的讲解。&lt;/p&gt;
&lt;p&gt;接下来，JVM 会把 class 文件中的字节码加载到内存中，经过连接和初始化以后，类在调用执行的过程中，会继续把字节码翻译成机器码，这个翻译过程在 Hotspot 中有两种形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解释执行：逐条将字节码翻译成机器码并执行&lt;/li&gt;
&lt;li&gt;即时编译：将一个方法中所包含的所有字节码编译出机器码后再执行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在起始阶段，JVM 中的字节码是由解释器(Interpreter)完成编译的，当虚拟机发现某个方法或代码块的运行特别频繁时，这些代码块就会被认定为热点代码。为了提高热点代码的执行效率，在运行时，JIT 会把这些代码编译成本地平台相关的机器码，并进行各层次的优化，然后保存到内存中，这一过程就被称为即时编译。&lt;/p&gt;
&lt;p&gt;这种将两种编译方式混合执行的策略，在上图中被描述为“运行时编译”，也是 Hotspot 默认采用的策略。&lt;/p&gt;</summary>
    
    
    
    <category term="知识" scheme="https://hicsc.com/knowledge/"/>
    
    
  </entry>
  
  <entry>
    <title>非奋斗减肥：关于运动和减脂的一些小误区</title>
    <link href="https://hicsc.com/how-to-eat-better/"/>
    <id>https://hicsc.com/how-to-eat-better/</id>
    <published>2024-05-05T08:16:49.000Z</published>
    <updated>2024-09-29T10:21:09.672Z</updated>
    
    
    <summary type="html">&lt;p&gt;最近一段时间想控制下体重，随手翻的健康类书籍比较多，在这本&lt;a href=&quot;https://book.douban.com/subject/35238738/&quot;&gt;「非奋斗减肥」&lt;/a&gt;中确实收获到不少与常规认知有差异的知识。&lt;/p&gt;
&lt;h3 id=&quot;Part-ONE&quot;&gt;&lt;a href=&quot;#Part-ONE&quot; class=&quot;headerlink&quot; title=&quot;Part ONE&quot;&gt;&lt;/a&gt;Part ONE&lt;/h3&gt;&lt;p&gt;首先，介绍几种日常生活中随处都能听到，但又说不明白的几种物质。&lt;/p&gt;
&lt;h4 id=&quot;胰岛素&quot;&gt;&lt;a href=&quot;#胰岛素&quot; class=&quot;headerlink&quot; title=&quot;胰岛素&quot;&gt;&lt;/a&gt;胰岛素&lt;/h4&gt;&lt;p&gt;当我们摄入糖类食物时，食物中的糖开始被不同的酶分解，最终被小肠吸收后转化成为葡萄糖，通过血液输送到全身。血液中的葡萄糖转化为糖原后，会优先储存在肝脏和肌肉当中，但是肝脏和肌肉中储存糖原的空间十分有限。剩余的大量糖原就会进入脂肪细胞，转化成为脂肪储存在人体内，于是肥胖就形成了。&lt;/p&gt;
&lt;p&gt;当血液中的葡萄糖升高时，胰腺就开始工作了。胰腺会分泌胰岛素，胰岛素的作用就是促进血液中的葡萄糖转移到细胞中，帮助调节血糖，保证血糖值维持在一定的安全水平。因此，你摄入的糖越多，胰腺就要分泌更多的胰岛素来调节血糖，那么就会有更多的糖原进入脂肪细胞中。更重要的是，&lt;strong&gt;如果血液中的胰岛素水平长期居高不下，那么细胞对胰岛素的敏感度就会降低，形成胰岛素抵抗&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;胰岛素抵抗，跟抗生素的耐药性是一样的道理，对于有胰岛素抵抗的人来说，同等剂量的胰岛素无法使原先血液中的糖原进入细胞，于是胰腺就需要分泌更多的胰岛素才能把血糖降下来。而胰岛素又是促进脂肪合成的激素，这些大量的胰岛素会使身体合成更多的脂肪，所以胰岛素抵抗是现代人日渐肥胖的主要原因之一。胰岛素抵抗最容易导致腹部脂肪堆积。如果你的腰围和臀围的比例大于 0.9，就有较大可能存在明显的胰岛素抵抗。&lt;/p&gt;
&lt;p&gt;因此，&lt;strong&gt;胰岛素又被称为肥胖激素&lt;/strong&gt;，想要把胰岛素控制在很低的水平，关键就是控制糖的摄入。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/forest/how-to-eat-better.jpg&quot; alt=&quot;非奋斗减肥&quot;&gt; Photo by &lt;a href=&quot;https://unsplash.com/photos/sliced-vegetables-ocnsb17U6FE&quot;&gt;Dose Juice&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="读万卷书" scheme="https://hicsc.com/books/"/>
    
    
  </entry>
  
  <entry>
    <title>我要开始卷腹肌</title>
    <link href="https://hicsc.com/im-going-to-start-exercising/"/>
    <id>https://hicsc.com/im-going-to-start-exercising/</id>
    <published>2024-04-22T12:56:24.000Z</published>
    <updated>2024-09-29T10:43:07.200Z</updated>
    
    
    <summary type="html">&lt;p&gt;年初下定了决心今年体重一定要掉到 110 斤，但从春节后就一直没怎么运动，饮食也没节制，体重相较与去年还涨了近 10 斤。眼看时间来到了 5 月，时间也快过半了，想想也该行动起来了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/forest/im-going-to-start-exercising.jpg&quot; alt=&quot;我要开始卷腹肌&quot;&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/group-of-women-doing-yoga-gJtDg6WfMlQ&quot;&gt;bruce mars&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在 B 站上找了个 &lt;a href=&quot;https://www.bilibili.com/cheese/play/ss3237&quot;&gt;练腹肌的课程&lt;/a&gt;，不仅能跟着练，还介绍了饮食的底层逻辑，甚至还推荐了食谱。正好最近也看了基本有关健康的书籍，结合自己的实际情况，定制了下面的食谱。&lt;/p&gt;
&lt;p&gt;像速食鸡胸肉、荞麦面、面包这些东西，我先前吃得也不多，也不知道好不好吃，但暂且先吃着。&lt;/p&gt;
&lt;h4 id=&quot;饮食原则&quot;&gt;&lt;a href=&quot;#饮食原则&quot; class=&quot;headerlink&quot; title=&quot;饮食原则&quot;&gt;&lt;/a&gt;饮食原则&lt;/h4&gt;&lt;p&gt;根据课程的内容，总结了几点我的饮食原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;规律进食，饿了才吃，不饿不吃&lt;/li&gt;
&lt;li&gt;避免 &lt;strong&gt;添加糖&lt;/strong&gt; 的食物和饮料，常见的饮料、甜食、零食、罐头等都含有大量的添加糖&lt;/li&gt;
&lt;li&gt;避免油炸、油焖、干锅、红烫火锅、重口川菜等 &lt;strong&gt;多油&lt;/strong&gt; 的食谱&lt;/li&gt;
&lt;li&gt;不吃猪蹄、五花肉、鸡皮、油炸薯片等 &lt;strong&gt;脂肪过高&lt;/strong&gt; 的食物&lt;/li&gt;
&lt;li&gt;少吃腊肉、腌肉、话梅等 &lt;strong&gt;重盐&lt;/strong&gt; 食物&lt;/li&gt;
&lt;li&gt;每天喝 2.5L-3L 水&lt;/li&gt;
&lt;li&gt;每周可以有 1 顿欺骗餐，跟同事聚会、朋友聚餐等，但大餐吃饱即可，不要吃撑&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;减脂期饿是常态，如果每天睡前，没有微微的饥饿感，那么证明你今天吃太多了&lt;/strong&gt;</summary>
    
    
    
    <category term="生活漫记" scheme="https://hicsc.com/ramble/"/>
    
    
  </entry>
  
  <entry>
    <title>M型社会：我们从哪儿开始？</title>
    <link href="https://hicsc.com/m-type-society/"/>
    <id>https://hicsc.com/m-type-society/</id>
    <published>2024-03-13T13:36:03.000Z</published>
    <updated>2024-09-29T10:18:39.459Z</updated>
    
    
    <summary type="html">&lt;p&gt;三十年前，日本经济开始衰退，人民收入开始减少，年收入在600万日元以下的中低阶层，已经占了日本总人口的八成。原先占比八成的中产阶级，一大部分人落到中低阶层，一小部分人挤入富裕阶层。中产彻底解体，一个人要么是富人，要么是穷人，没有中间层，收入严重两极分化，这就是所谓的M型社会。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/forest/M-type-society.jpeg&quot; alt=&quot;M型社会文章题图&quot;&gt;&lt;/p&gt;
&lt;p&gt;中国在经历了三十年的高速发展之后，也不可避免的慢了下来。经历了这几年的经济不景气，谁也不知道我们会不会经历日本那种长期的经济衰退，但短期的衰退是不可避免了。那我们应该怎么办？也许这本书能给我们些启发。&lt;/p&gt;</summary>
    
    
    
    <category term="读万卷书" scheme="https://hicsc.com/books/"/>
    
    
  </entry>
  
  <entry>
    <title>聊聊回家过年那点事</title>
    <link href="https://hicsc.com/chinese-new-year-2024/"/>
    <id>https://hicsc.com/chinese-new-year-2024/</id>
    <published>2024-02-18T13:14:30.000Z</published>
    <updated>2024-09-29T10:55:24.632Z</updated>
    
    
    <summary type="html">&lt;p&gt;从年三十到正月初七这八天是我过去一年过得最轻松的一周，这一周没有客户需求、没有业绩目标、没有技术难题、更没有不学习的罪恶感，真的是太爽了。&lt;/p&gt;
&lt;p&gt;跟以往一样，腊月二十九在家大扫除，年三十为年夜饭从早忙到晚，初一逛逛街看看电影，初二我和老婆各回各家拜年走亲戚。我很喜欢回家走亲戚，也很喜欢和他们聊天，他们会告诉我过去一年身边发生的趣事，我也会跟他们说说我所看到的世界。这样毫无压力的聊天氛围，让我特别的放松。&lt;/p&gt;
&lt;p&gt;过去几年，都是开车回家，堵怕了，今年坐火车回去，稍微轻松一点，火车上也发生了不少趣事。接下来就说说，过年回家的新体验。&lt;/p&gt;</summary>
    
    
    
    <category term="生活漫记" scheme="https://hicsc.com/ramble/"/>
    
    
  </entry>
  
  <entry>
    <title>笔记的方法</title>
    <link href="https://hicsc.com/the-method-of-taking-notes/"/>
    <id>https://hicsc.com/the-method-of-taking-notes/</id>
    <published>2024-02-07T09:37:06.000Z</published>
    <updated>2024-09-29T10:27:32.840Z</updated>
    
    
    <summary type="html">&lt;p&gt;在电子书上划过很多线、在浏览器中裁剪过很多网页、在微信中也收藏过不少文章，如果这些能够算作笔记的话，我确实记录过不少东西。然并卵，这些文字于我而言有什么意义？也许只是在当时多了些情绪价值而已。因此，在阅读这本书以后，我重新开始审视记笔记这个动作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/forest/the-method-of-taking-notes.png&quot; alt=&quot;笔记的方法&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用自己的话来记笔记&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;记笔记的核心是用自己的话来记录。为什么？&lt;/p&gt;
&lt;p&gt;首先，人的记忆有两种机制：存储和提取。研究表明，信息存入记忆越容易，提取就越困难；反之，存入记忆越困难，知识提取会更方便，这就是「必要难度理论」。用自己的话来记录，就是为了增加存储时的难度，以便未来遇到难题时，更有可能想起（提取）记过的笔记。&lt;/p&gt;
&lt;p&gt;其次，记录和收集信息是有巨大区别的。大量收集的信息，很多时候并不会给我们太多帮助，因为我们遇到问题时，更习惯直接使用搜索引擎或AI。你可能会说，那我可以先去笔记中搜索呀。当然可以，但我想告诉你的时候，搜索没有加工过的笔记，跟搜索网页并没有太大的区别。&lt;/p&gt;
&lt;p&gt;因此，&lt;strong&gt;记录并不那么重要，重要的是思考&lt;/strong&gt;。只要用自己的话来复述或是总结，你一定会思考，这种倒逼自己思考的过程，才是记录的意义。&lt;/p&gt;</summary>
    
    
    
    <category term="读万卷书" scheme="https://hicsc.com/books/"/>
    
    
  </entry>
  
  <entry>
    <title>我在北京送快递：这个艰辛颠簸的世界</title>
    <link href="https://hicsc.com/this-difficult-and-bumpy-world/"/>
    <id>https://hicsc.com/this-difficult-and-bumpy-world/</id>
    <published>2024-01-14T08:02:37.000Z</published>
    <updated>2024-09-29T10:29:21.207Z</updated>
    
    
    <summary type="html">&lt;p&gt;看多了网络上灯红酒绿的生活，读读「我在北京送快递」吧，作者胡安焉用类似于“流水账”的方式记录他在约十多年间干的近二十份工作，写下了这个艰辛颠簸的世界。&lt;/p&gt;
&lt;p&gt;我对现实世界的反应有点迟钝，很多人会误以为这是乐观，觉得什么问题在我这儿都云淡风轻似的，但实际上可能是我对现实并没有那么多期待，甚至有点迟钝而已。在整个阅读过程中，其实我并没有那么感同身受，也没有那种窥探到另一个阶层生活的快感，尽管我并不认为我和快递员不在同一个阶层。&lt;/p&gt;
&lt;p&gt;但作为一个社畜，同为社会的最底层，总还能找到些许共鸣。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/forest/this-difficult-and-bumpy-world.png&quot; alt=&quot;我在北京送快递&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="读万卷书" scheme="https://hicsc.com/books/"/>
    
    
  </entry>
  
  <entry>
    <title>我经历的2023年</title>
    <link href="https://hicsc.com/went-through-in-2023/"/>
    <id>https://hicsc.com/went-through-in-2023/</id>
    <published>2024-01-01T10:36:19.000Z</published>
    <updated>2024-09-29T10:42:39.019Z</updated>
    
    
    <summary type="html">&lt;p&gt;新年第一天，坐在桌前，试着想回忆过去一年干了些什么，除了些许情绪，脑袋一片空白。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/forest/went-through-in-2023.png&quot; alt=&quot;Photo by Morgan Sessions&quot;&gt;&lt;br&gt;Photo by &lt;a href=&quot;https://unsplash.com/@morgansessions?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&quot;&gt;Morgan Sessions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们六个人的团队运营着一款B端产品，这一年，我们在研发、销售、客户成功方面都做了不少尝试，营收相较于22年并没有太大的提升，但付出的代价却是账上的现金消耗一空。这也意味着，24年我们必须要实现收支平衡，否则团队就要散了。当然这一年也不是完全没有收获，最大的收获就是知道哪些事我们做不了，哪些路我们走不通。最重要的是，仍然有小伙伴愿意继续坚持，愿意乐观的相信我们仍能成功。&lt;/p&gt;
&lt;p&gt;2024年，我们六人团队的营收目标是200万，如果这个目标能够实现，除了能够保证大家的收入不减少以外，还能验证我们的一些猜想，为后年打下一个好的基础。感兴趣的话，年底再来看看，如果目标实现了，我就详细地说说我们这一年是怎么做的；如果目标没实现，我就发个简历找工作。&lt;/p&gt;
&lt;p&gt;工作就说这么多吧，接下来是一些碎碎念。&lt;/p&gt;</summary>
    
    
    
    <category term="生活漫记" scheme="https://hicsc.com/ramble/"/>
    
    
  </entry>
  
  <entry>
    <title>舅舅的骄傲</title>
    <link href="https://hicsc.com/my-uncles-price/"/>
    <id>https://hicsc.com/my-uncles-price/</id>
    <published>2023-03-01T07:03:06.000Z</published>
    <updated>2024-04-03T12:32:30.915Z</updated>
    
    
    <summary type="html">&lt;p&gt;早上跑步听&lt;a href=&quot;https://podcasts.apple.com/cn/podcast/mactalk-%E5%A4%9C%E8%88%AA%E8%A5%BF%E9%A3%9E/id1619054900&quot;&gt;播客&lt;/a&gt;，小盖讲了一个故事。&lt;/p&gt;
&lt;p&gt;他叔叔有次开车回老家，在高速路上遇到一个人车坏了。叔叔也没多想，二话没说，就趴倒车底修车。他甚至没有顾及自己的新衣服。修好车之后，只象征性的要了一点费用。&lt;/p&gt;
&lt;p&gt;不少人知道这件事，觉得你这人有点傻呀，你得多要点钱。当时那种情况，前不着村后不着店，你要几千他也得给呀。&lt;/p&gt;
&lt;p&gt;小盖当时也觉得他傻，但现在对他刮目相看。叔叔是一个工匠，一个手艺人，当时那种情况如果管人要很多钱，甚至是勒索人家，作为手艺人的心气儿就会被破坏。&lt;/p&gt;
&lt;p&gt;直到现在，叔叔也不是大富大贵，但每次看到他沉浸在自己的手艺里面的那种神采，那个心气儿，你会由衷为他开心。&lt;/p&gt;
&lt;p&gt;听完这个故事，我突然想到自己的舅舅。&lt;/p&gt;</summary>
    
    
    
    <category term="生活漫记" scheme="https://hicsc.com/ramble/"/>
    
    
  </entry>
  
  <entry>
    <title>我度过了怎样的2022年?</title>
    <link href="https://hicsc.com/my-2022/"/>
    <id>https://hicsc.com/my-2022/</id>
    <published>2022-12-31T12:11:00.000Z</published>
    <updated>2024-09-29T10:42:21.699Z</updated>
    
    
    <summary type="html">&lt;p&gt;2022年，疫情进入第三个年头，经历无尽的封控和核酸后，却在年底来了个大转弯，老司机的方向盘都差点甩飞出去。这一年因为国际局势和疫情，周围的人失业的失业，破产的破产，过得尤为不容易。我们盼望2022年早点过去，期望2023年能够不那么艰难。&lt;/p&gt;
&lt;p&gt;2022年我印象最深刻的国际事件当属俄乌战争，让人真切地感受到战争的残酷——几百万人流亡欧洲、城镇变成废墟、大量士兵和平民伤亡…… 战争给乌克兰造成至少超千亿美元损失，重建至少需要2000亿美元。在我们看来的一串串数字，是千千万万乌克兰人支离破碎的生活。&lt;br&gt;&lt;img src=&quot;/images/forest/ukraine.png&quot; alt=&quot;2022年的乌克兰&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="生活漫记" scheme="https://hicsc.com/ramble/"/>
    
    
  </entry>
  
  <entry>
    <title>先让父母成熟起来</title>
    <link href="https://hicsc.com/let-the-parents-mature-first/"/>
    <id>https://hicsc.com/let-the-parents-mature-first/</id>
    <published>2022-12-12T12:11:00.000Z</published>
    <updated>2024-04-03T13:20:15.343Z</updated>
    
    
    <summary type="html">&lt;p&gt;作为一个父亲，自然而然对孩子的教育特别关心，但我们的关心与其他父母的焦虑完全不同。我和老婆都没有望子成龙的心思，只要孩子自己过得开心就好。所以，我估计他周围很多小朋友都比较羡慕他：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;他可以无限制地看奥特曼、熊出没、汪汪队、小猪佩奇……&lt;/li&gt;
&lt;li&gt;他可以随时玩自己喜欢的玩具，马上就该叫他打游戏了&lt;/li&gt;
&lt;li&gt;他每年自己想去哪个地方旅游，我们就带着他出去走走&lt;/li&gt;
&lt;li&gt;他可以自己决定什么时候睡觉、要不要吃饭、出不出去玩&lt;/li&gt;
&lt;li&gt;……&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;反正我们就是完全放养，他可以自由决定自己的一切，除非我看不惯他的时候。我们对他的唯一要求就是不要让老师来找我麻烦。&lt;/p&gt;
&lt;p&gt;我非常喜欢何帆和吴军两位老师，他们在教育孩子的观点大致一致。&lt;/p&gt;</summary>
    
    
    
    <category term="生活漫记" scheme="https://hicsc.com/ramble/"/>
    
    
  </entry>
  
  <entry>
    <title>为值得的客户至上</title>
    <link href="https://hicsc.com/serve-worthwhile-customers/"/>
    <id>https://hicsc.com/serve-worthwhile-customers/</id>
    <published>2022-12-09T03:21:48.000Z</published>
    <updated>2024-09-29T10:20:54.870Z</updated>
    
    
    <summary type="html">&lt;p&gt;之前，我很少读访谈和传记类的书，感觉里面的人物离自己都太远，不能共情。浑浑噩噩地过了这么些年，越发觉得无聊，突然想看看别人的生活是咋样的，遂开始读访谈和传记。我和团队正在开发和运营一款零代码的SaaS产品，因此对科技圈要更关注一点，比如最近刚读完 &lt;a href=&quot;https://book.douban.com/subject/35254632&quot;&gt;详谈：左晖&lt;/a&gt;，这本小册子记录了李翔围绕组织、使命、价值观、行业竞争、选人用人等话题，与左晖进行的两次深度访谈。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/forest/serve-worthwhile-customers.png&quot;&gt;&lt;br&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/iWTamkU5kiI&quot;&gt;David Iskander&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在我看来，左晖是一个很低调的人，不对外界或是竞争对手做过多的评价，不在乎自己是否成功，也不在乎外界对自己的误解，只关心自己做的事是否正确，关心自己是否让行业变得更好。&lt;/p&gt;</summary>
    
    
    
    <category term="读万卷书" scheme="https://hicsc.com/books/"/>
    
    
  </entry>
  
</feed>
